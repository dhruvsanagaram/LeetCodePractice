#1/2/23 - Longest Common Prefix - Strings - Easy
class Solution(object):
    def longestCommonPrefix(self, strs):
        if(len(strs) == 0):
            return ""
        prefix = strs[0]
        for i in range(len(strs)):
            print(strs[i].find(prefix))
            while(strs[i].find(prefix) != 0):
                prefix = prefix[0:len(prefix)-1]
                if(prefix == ""):
                    return ""
        return prefix

#1/3/23 - Remove Duplicates from Sorted Array - Arrays - Essay
class Solution(object):
    def removeDuplicates(self, nums):
        # my_dict = dict()
        # for i in range(len(nums)):
        #     if(nums[i] in my_dict.keys()):
        #         my_dict[nums[i]] += 1
        #     else:
        #         my_dict[nums[i]] = 1
        # nums = my_dict.keys()
        # return len(my_dict.keys()) 
        if len(nums) == 0:
            return 0
        
        addIdx = 1
        for i in range (len(nums)-1):
            if(nums[i] < nums[i+1]):
                nums[addIdx] = nums[i+1]
                addIdx+=1
        return addIdx

#1/4/23 - Merge Two Sorted Lists - LinkedLists - Easy
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1 == null){
            return list2;
        }
        if(list2 == null){
            return list1;
        }
        if(list1.val < list2.val){
            list1.next = mergeTwoLists(list1.next, list2);
            return list1;
        }
        else{
            list2.next = mergeTwoLists(list1, list2.next);
            return list2;
        }
    }
}

#1/6/23 - Valid Parentheses - Stacks - Easy
class Solution {
    public boolean isValid(String s) {
        System.out.println(s);
        Stack<Character> parentheses = new Stack<Character>();
        String tempStr = new String();
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '(' || s.charAt(i) == '{' || s.charAt(i) == '['){
                parentheses.push(s.charAt(i));
            }
            else{
                if(s.charAt(i) == ')' && (parentheses.isEmpty() 
                    || parentheses.pop() != '(')){
                    return false;
                }
                if(s.charAt(i) == ']' && (parentheses.isEmpty() 
                    || parentheses.pop() != '[')){
                    return false;
                }
                if(s.charAt(i) == '}' && (parentheses.isEmpty() 
                    || parentheses.pop() != '{')){
                    return false;
                }
            }
        }
        if(parentheses.isEmpty()){
            return true;
        }
        return false;
        /*
        System.out.println(s);
        Stack<Character> parentheses = new Stack<Character>();
        String tempStr = new String();
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '(' || s.charAt(i) == '{' || s.charAt(i) == '['){
                parentheses.push(s.charAt(i));
            }
            else{
                if(s.charAt(i) == ')'){
                    int j = i;
                    while(j >= 0 && s.charAt(j) != '('){
                        tempStr += parentheses.pop();
                        j--;
                    }
                    if(j < 0){
                        return false;
                    }
                    System.out.println(parentheses);
                    if(!parentheses.isEmpty()){
                        parentheses.pop();  
                    }
                    while(j != i){
                        System.out.println(tempStr);
                        parentheses.push(tempStr.charAt(tempStr.length()-1-i));
                        j++;
                    }
                    tempStr = "";
                }
                if(s.charAt(i) == ']'){
                    int j = i;
                    while(j >= 0 && s.charAt(j) != '['){
                        tempStr += parentheses.pop();
                        j--;
                    }
                    if(j < 0){
                        return false;
                    }
                    if(!parentheses.isEmpty()){
                        parentheses.pop();  
                    }
                    while(j != i){
                        parentheses.push(tempStr.charAt(tempStr.length()-1-i));
                        j++;
                    }
                    tempStr = "";
                }
                if(s.charAt(i) == '}'){
                    int j = i;
                    while(j >= 0 && s.charAt(j) != '{'){
                        tempStr += parentheses.pop();
                        j--;
                    }
                    if(j < 0){
                        return false;
                    }
                    if(!parentheses.isEmpty()){
                        parentheses.pop();  
                    }                    while(j != i){
                        parentheses.push(tempStr.charAt(tempStr.length()-1-i));
                        j++;
                    }
                    tempStr = "";
                }
            }
        }
        if(parentheses.isEmpty()){
            return true;
        }
        return false;
    }
    */
}
}

#1/8/23 - Remove Element - Arrays - Easy
class Solution {
    public int removeElement(int[] nums, int val) {
        int c = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != val){
                nums[c] = nums[i];
                c++;
            }
        }
        return c;
    }
}

#1/8/23 - Search Insert Position - Arrays - Easy
class Solution {
    public int searchInsert(int[] nums, int target) {
        if(nums[0] >= target){
            return 0;
        }
        for(int i = 1; i <= nums.length-1; i++){
            if(nums[i] == target){
                return i;
            }
            if(nums[i-1] < target && target < nums[i]){
                return i;
            }
            if(i+1 != nums.length && nums[i-1] < target && target < nums[i+1]){
                return i+1;
            }
        }
        return nums.length;
    }
}

#1/9/23 - Preorder Traversal - Trees - Easy
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<Integer>();
        list = traversalHelper(list, root);
        return list;
    }

    public List<Integer> traversalHelper(List<Integer> list, TreeNode root){
        if(root == null){
            return list;
        }
        list.add(root.val);
        traversalHelper(list, root.left);
        traversalHelper(list, root.right);
        return list;
    }
}

#1/11/23 - Add Binary - Strings - Easy
import java.math.*;
class Solution {
    public String addBinary(String a, String b) {
        BigInteger a_new = new BigInteger(a, 2);
        return a_new.add(new BigInteger(b, 2)).toString(2);
        /*
        String sum = "";
        int carry = 0;
        int numA = 0;
        int numB = 0;

        for(int i = a.length()-1; i>=0; i--){
            try{
                numA = Integer.parseInt(a.charAt(i) + "");
            }
            catch(IndexOutOfBoundsException e){
                numA = 0;
            }

            System.out.print(numA + " ");

            try{
                numB = Integer.parseInt(b.charAt(i) + "");
            }
            catch(IndexOutOfBoundsException e){
                numB = 0;
            }

            System.out.println(numB + " ");

            if(carry == 0){
                if(numA == 1 && numB == 1){
                    carry = 1;
                    sum += '0';
                }
                if(numA == 0 && numB == 0){
                    carry = 0;
                    sum += '0';
                }
                if((numA == 0 && numB == 1) 
                    || (numA == 1 && numB == 0))
                {
                    carry = 0;
                    sum += '1';
                }
            }

            if(carry == 1){
                if(numA == 1 && numB == 1){
                    carry = 1;
                    sum += '1';
                }
                if(numA == 0 && numB == 0){
                    carry = 0;
                    sum += '1';
                }
                if((numA == 0 && numB == 1) 
                    || (numA == 1 && numB == 0))
                {
                    carry = 1;
                    sum += '0';
                }
            }
            System.out.println(sum);
        }
        return null;
        */
    }
}

#2/1/23 - Maximum Ascending Subarray Sum - Arrays - Easy
class Solution {
    public int maxAscendingSum(int[] nums) {
        int maxSum = nums[0];
        int i = 1;
        int curSum = nums[0];
        while(i < nums.length){
            System.out.println("Cur:" + nums[i]);
            System.out.println("Before:" + nums[i-1]);
            System.out.println("CurSum:" + curSum);
            System.out.println("MaxSum:"+maxSum);
            System.out.println();
            if(nums[i] <= nums[i-1]){
                if(curSum > maxSum){
                    maxSum = curSum;
                }
                curSum = 0;
            }
            curSum += nums[i];
            i++;
        }
        if(maxSum < curSum){
            maxSum = curSum;
        }
        return maxSum;
    }
}


#2/2/23 - Remove Duplicates - LinkedList - Easy
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        HashMap<Integer, Integer> freq= new HashMap<Integer, Integer>();
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode bef = dummy;
        ListNode cur = head;
        while(cur != null){
            Integer count = freq.get(cur.val);

            if(count == null){
                freq.put(cur.val, 1);
                bef = bef.next;
            } 
            else{
                bef.next = cur.next;
            }
            cur = cur.next;
        }
        return head;
    }
}

#2/8/23 - Squaring a Sorted Array - Array - Easy
class Solution {
    public int[] sortedSquares(int[] nums) {
       int[] result = new int[nums.length];
       int left = 0;
       int right = nums.length-1;
       int p = nums.length-1;
       while(left <= right){
           if(Math.abs(nums[left]) > Math.abs(nums[right])){
               result[p] = nums[left]*nums[left];
               left++;
           }
           else{
               result[p] = nums[right]*nums[right];
               right--;
           }
           p--;
       } 
       return result;
    }
}

#2/19/23 - Minimum Size Subarray Sum - Array - Sliding Window - Medium
class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int result = Integer.MAX_VALUE;
        int left=0;
        int sum = 0;
        for(int i = 0; i < nums.length; i++){
            sum += nums[i];
            while(left <= i && sum >= target){
                result = Math.min(result, i - left + 1);
                sum = sum - nums[left];
                left++;
            }
        }
        
        if(result == Integer.MAX_VALUE){
            return 0;
        }
        return result;
    }
}

#2/22/23 - Contains Duplicate - Hash Map - Easy
class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashMap<Integer, Integer> numCount = new HashMap();
        for(int i = 0; i < nums.length; i++){
            boolean count = numCount.containsKey(nums[i]);
            if(count == false){
                numCount.put(nums[i], 1);   
            }
            else{
                return true;
            }
        }
        return false;
    }
}

#2/22/23 - Missing Number - Hash Map - Easy
class Solution {
    public int missingNumber(int[] nums) {
        HashMap<Integer, Boolean> map = new HashMap<Integer, Boolean>();
        for(int i : nums){
            if(map.containsKey(i) == false){
                map.put(i, true);
            }
        }
        int num = Integer.MAX_VALUE;
        if(map.get(nums.length) == null){
            return nums.length;
        }
        for(int i = 0; i < nums.length; i++){
            if(map.get(i) == null){
                num = i;
            }
        }
        return num;
    }
}

#2/23/23 - Single Number - XOR - Easy
class Solution {
    public int singleNumber(int[] nums) {
        int xor = 0;
        for(int i: nums){
            xor = xor ^ i;
        }
        return xor; 
    }
}

#2/23/23 - Middle of the Linked List - Linked List - Easy
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = (fast.next).next;
        }
        return slow;
    }
}

#3/3/23 - Symmetric Tree - Trees - DFS - Easy
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null){
            return true;
        }
        return twoNodeTraversal(root.left, root.right);
    }

    public boolean twoNodeTraversal(TreeNode leftNode, TreeNode rightNode){
        if(leftNode == null && rightNode == null){
            return true;
        }
        if(leftNode == null ^ rightNode == null){
            return false;
        }
        if(leftNode.val != rightNode.val){
            return false;
        }
        return (twoNodeTraversal(leftNode.left, rightNode.right) 
            && twoNodeTraversal(leftNode.right, rightNode.left));
    }
}

#3/4/23 - Backspace String Compare - Stacks - Easy
class Solution {
    public boolean backspaceCompare(String s, String t) {
        Stack<Character> stack_S = new Stack<Character>();
        Stack<Character> stack_T = new Stack<Character>();
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) != '#'){
                stack_S.push(s.charAt(i));
            }
            else{
                if(!stack_S.isEmpty()){
                    stack_S.pop();
                }
            }
        }
        
        for(int i = 0; i < t.length(); i++){
            if(t.charAt(i) != '#'){
                stack_T.push(t.charAt(i));
            }
            else{
                if(!stack_T.isEmpty()){
                    stack_T.pop();
                }
            }
        }

        if(!stack_S.equals(stack_T)){
            return false;
        }
        return true;

    }
}

#3/4/23 - Climbing Stairs - Hash Map - Dynamic Programming - Easy
class Solution {
    HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
    public int climbStairs(int n) {
        if(n == 1 || n == 2){
            return n;
        }
        if(map.containsKey(n)){
            return map.get(n);
        }
        else{
            map.put(n, climbStairs(n-1) + climbStairs(n-2));
            return map.get(n);
        }
    }
}

#3/5/23 - Minimum Depth of a Binary Tree - Trees - DFS - Easy
class Solution {
    ArrayList
    public int minDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        if(root.left == null && root.right == null){
            return 1;
        }
        if(root.left != null && root.right == null){
            return 1 + minDepth(root.left);
        }
        if(root.left == null && root.right != null){
            return 1 + minDepth(root.right);
        }
        return 1 + Math.min(minDepth(root.left), minDepth(root.right));
    }
}

#3/6/23 - Is Same Tree - Trees - DFS - Easy
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null && q == null){
            return true;
        }
        if(p == null ^ q == null){
            return false;
        }
        if(p.val != q.val){
            return false;
        }
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
}

#3/7/23 - Maximum Depth of a Binary Tree - Trees - DFS - Easy
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        if(root.left == null && root.right == null){
            return 1;
        }
        if(root.left == null && root.right != null){
            return 1 + maxDepth(root.right);
        }
        if(root.left != null && root.right == null){
            return 1 + maxDepth(root.left);
        }
        
        return 1 + Math.max(maxDepth(root.right), maxDepth(root.left));
    }
}

#3/8/23 - Balanced Binary Tree - Trees - DFS - Easy
class Solution {
    public boolean isBalanced(TreeNode root) {
        return height(root) != -1;
    }

    public int height(TreeNode root){
        if(root == null){
            return 0;
        }
        int leftBalance = height(root.left);
        if(leftBalance == -1){
            return -1;
        }
        int rightBalance = height(root.right);
        if(rightBalance == -1){
            return -1;
        }
        if(Math.abs(leftBalance - rightBalance) > 1){
            return -1;
        }
        return 1 + Math.max(leftBalance, rightBalance);
    }
}

#7/30/23 - Maximum Ascending Subarray Sum - Arrays - Easy
class Solution {
    public int maxAscendingSum(int[] nums) {
        if(nums.length == 0)
          return 0;
        int tempMax = nums[0];
        int maxSum = tempMax;
        int start = 0;
        int end = 1;
        while(start != nums.length && end < nums.length){
            if(nums[end] <= nums[end - 1]){
                start = end;
                end = start+1;
                tempMax = nums[start];
            }
            else{
                tempMax += nums[end];
                end++;
            }
            maxSum = Math.max(tempMax, maxSum);
        }
        return maxSum;
    }
}

#7/30/23 - Maximum Average Subarray 1 - Arrays - Easy
class Solution {
    public double findMaxAverage(int[] nums, int k) {
        if(nums.length == 0){
            return 0;
        }

        int currSum = 0;
        for(int i = 0; i < k;i++){
            currSum += nums[i];
        }

        int start = 0;
        int end = k-1;
        int tempSum = currSum;

        while(end + 1 != nums.length){
            tempSum = tempSum - nums[start] + nums[end+1];
            if(tempSum > currSum){
                currSum = tempSum;
            }
            start += 1;
            end += 1;
        }
        return (double)currSum/k;
    }
}

#8/7/23 - Valid Parentheses - Stacks - Easy
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>();
        HashMap<Character, Character> map = new HashMap<Character, Character>();
        map.put(')', '(');
        map.put('}', '{');
        map.put(']', '[');

        for(int i = 0; i < s.length(); i++){
            if(map.containsKey(s.charAt(i))){
                if(stack.isEmpty() || map.get(s.charAt(i)) != stack.pop()){
                    return false;
                } 
            }
            else{
                stack.push(s.charAt(i));
            }
        }
        return stack.isEmpty();
    }
}

#8/7/23 - Best Time to Buy and Sell Stock - Two Pointer - Easy
class Solution {
    public int maxProfit(int[] prices) {
        int left = 0;
        int right = 1;
        int maxDiff = 0;
        while(right != prices.length){
            if(prices[right] < prices[left]){
                left = right;
            }
            else{
                maxDiff = Math.max(maxDiff, prices[right] - prices[left]);
            }

            right++;
        }
        return maxDiff;
    }
}

#8/7/23 - Move Zeros - Two Pointer - Easy
class Solution {
    public void moveZeroes(int[] nums) {
        int left = 0;
        int right = 0;
        while(right != nums.length){
            if(nums[right] != 0){
                int temp = nums[right];
                nums[right] = nums[left];
                nums[left] = temp;
                left++;
            }
            right++;
        }        
    }
}

#8/7/23 - Binary Search - Two Pointer - Easy

class Solution {
    public int search(int[] nums, int target) {
        if(nums.length == 0){
            return -1;
        }
        if(nums.length == 1){
            if(nums[0] == target){
                return 0;
            }
            return -1;
        }

        int start = 0;
        int end = nums.length-1;
        while(start <= end){
            int m = (start + end)/2;
            if(nums[m] == target){
                return m;
            }
            else if(target < nums[m]){
                end = m-1;
            }
            else if(target > nums[m]){
                start = m+1;
            }
        }
        return -1;
    }
}

#8/8/23 - Reverse Linked List - Linked List - Easy
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        var current = head;
        while(current != null){
            ListNode nextTemp = current.next;
            current.next = prev;
            prev = current;
            current = nextTemp;
        }
        return prev;
    }
}

#8/28/23 - Maximum Depth of Binary Tree - Trees - Easy
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        if(root.left != null && root.right == null){
            return 1 + maxDepth(root.left);
        }
        if(root.right != null && root.left == null){
            return 1 + maxDepth(root.right);
        }            
        return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
    }
}

#8/28/23 - Invert Binary Tree - Trees - Easy
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root == null){
            return root;
        }
        TreeNode left = invertTree(root.left);
        TreeNode right = invertTree(root.right);
        root.left = right;
        root.right = left;
        return root;
    }
}

#8/28/23 - Linked List Cycle - Linked List - Easy
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = (fast.next).next;
            if(slow == fast){
                return true;
            }
        }
        return false;

    }
}

#8/28/23 - Merge Two Sorted Lists - Linked List - Easy
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
       if(list1 == null){
           return list2;
       }
       if(list2 == null){
           return list1;
       }
       if(list1.val < list2.val){
           list1.next = mergeTwoLists(list1.next, list2);
           return list1;
       }
       else{
           list2.next = mergeTwoLists(list1, list2.next);
           return list2;
       }
    }
}

#8/29/23 - Is Same Tree - Trees - Easy
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null && q == null){
            return true;
        }
        if(p == null && q != null){
            return false;
        }
        if(p != null && q == null){
            return false;
        }
        if(p.val != q.val){
            return true;
        }
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
}

#8/29/23 - Is Subtree - Trees - Easy
class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        if(root == null){
            return false;
        }

        return isSameTree(root, subRoot) 
        || isSubtree(root.left, subRoot) 
        || isSubtree  (root.right, subRoot);
    }

    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null && q == null){
            return true;
        }
        if(p == null && q != null){
            return false;
        }
        if(p != null && q == null){
            return false;
        }
        if(p.val != q.val){
            return false;
        }
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
}
